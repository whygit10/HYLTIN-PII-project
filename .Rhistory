#filter(count >= 500) %>%
#filter(Zip.Char == '78741') %>%
allYrsZips <- expand.grid(years = unique(yearlyCrime$years), Zip.Char = unique(yearlyCrime$Zip.Char))
yearlyCrimeAll <- left_join(allYrsZips, yearlyCrime, by = join_by(Zip.Char, years))  %>%
inner_join(tig_zips, by = join_by(Zip.Char == ZCTA5CE20)) %>%
mutate(crim.count = ifelse(is.na(crim.count), 0, crim.count))
cpeth <- yearlyCrimeAll %>% filter(crim.count >= 50) %>%
ggplot() +
geom_sf(aes(geometry = geometry, fill = crim.count, frame = years, text = paste(Zip.Char, '<br>', crim.count))) +
scale_fill_gradient2(low = "#E0144C", mid = '#FFFFFF', high = "#000067", midpoint = -5000,
trans = 'reverse') +
theme_classic() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
line = element_blank(),
plot.title = element_text(hjust = 0, size = 15)) +
labs(fill = 'Crime Count',
title = 'Crime by Location Over Time')
cplotly <- cpeth %>% ggplotly() %>%
layout(hoverlabel = text) %>%
animation_opts(1500, 1) %>%
animation_slider(currentvalue = list(visible = FALSE)) %>%
animation_button(x = 0, xanchor = "left", y = 0, yanchor = "bottom")
RecatTable <- d1 %>%
filter(year(Occurred.Date) < 2024) %>%
mutate(
Occur.Years = trunc.Date(Occurred.Date, 'years')
) %>%
group_by(Crime.Category, Highest.Offense.Description, Occur.Years) %>%
summarize(
Count = n(),
.groups = 'drop'
) %>%
arrange(by = Occur.Years) %>%
group_by(Crime.Category, Highest.Offense.Description) %>%
summarize(
mean = mean(Count),
sd = sd(Count),
sum = sum(Count),
.groups = 'drop'
) %>%
gt() %>%
tab_header(
title = md('**Crime Recategorization Key**')
) %>%
cols_label(
Crime.Category = md('**New Category**'),
Highest.Offense.Description = md('**Original Description**'),
mean = md('**Mean Occurrence Across Years**'),
sd = md('**Standard Deviation of Yearly Occurrence**'),
sum = md('**Total Occurrences**')
) %>%
fmt_number(columns = mean:sd, decimals = 1) %>%
opt_interactive()
skim(d1)
catbarly
cplotly
RecatTable
# Categorical bar chart
d1 %>% filter(Crime.Category == 'MURDER') %>% mutate(month = trunc.Date(Occurred.Date, 'months')) %>% group_by(month, Highest.Offense.Description) %>% summarize(n = n())
# Choropleth plot
# Time series plots
# load a few R packages
pacman::p_load(here, knitr, tidyverse, skimr, htmlwidgets, htmltools, plotly, tigris, gt, gtExtras)
theme_set(theme_minimal())
d1 <- readRDS(here('data','processed-data','processed-crime.rds'))
tig_zips <- zctas(cb=TRUE, starts_with = c(unique(d1$Zip.Code)), year = 2020, progress_bar = FALSE)
catYearly <- d1 %>% mutate(
years = year(Occurred.Date)
#years = as.character(years)
) %>% filter(years != 2024) %>%
group_by(Crime.Category, years) %>%
summarize(crim.count  = n()) %>%
ungroup() %>%
as.data.frame()
allYrsCats <- expand.grid(years = unique(catYearly$years), Crime.Category = unique(catYearly$Crime.Category))
yearlyAllCats <- left_join(allYrsCats, catYearly, by = join_by(Crime.Category, years))  %>%
mutate(crim.count = ifelse(is.na(crim.count), 0, crim.count))
fig <- plot_ly(yearlyAllCats,
x = ~crim.count,
y = ~fct_reorder(Crime.Category, crim.count),
type = 'bar',
showlegend = F,
frame = ~years,
marker = list(color = '#000067')
)
catbarly <- fig %>%
layout(
yaxis = list(
title = '', tickangle = -30, tickfont = list(size = 8)
),
xaxis = list(
title = 'Count of Occurence'
),
title = list(
text = 'Yearly Occurence of Crime by Category',
y = 0.99, x = 0.1, xanchor = 'left', yanchor = 'top',
font = list(
size = 18
)
)
)
yearlyCrime <- d1 %>% mutate(
Zip.Char = as.character(Zip.Code),
years = year(Occurred.Date),
years = as.character(years)
) %>% filter(years != 2024) %>%
group_by(Zip.Char, years) %>%
summarize(crim.count  = n()) %>%
ungroup() %>%
as.data.frame()
#filter(count >= 500) %>%
#filter(Zip.Char == '78741') %>%
allYrsZips <- expand.grid(years = unique(yearlyCrime$years), Zip.Char = unique(yearlyCrime$Zip.Char))
yearlyCrimeAll <- left_join(allYrsZips, yearlyCrime, by = join_by(Zip.Char, years))  %>%
inner_join(tig_zips, by = join_by(Zip.Char == ZCTA5CE20)) %>%
mutate(crim.count = ifelse(is.na(crim.count), 0, crim.count))
cpeth <- yearlyCrimeAll %>% filter(crim.count >= 50) %>%
ggplot() +
geom_sf(aes(geometry = geometry, fill = crim.count, frame = years, text = paste(Zip.Char, '<br>', crim.count))) +
scale_fill_gradient2(low = "#E0144C", mid = '#FFFFFF', high = "#000067", midpoint = -5000,
trans = 'reverse') +
theme_classic() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
line = element_blank(),
plot.title = element_text(hjust = 0, size = 15)) +
labs(fill = 'Crime Count',
title = 'Crime by Location Over Time')
cplotly <- cpeth %>% ggplotly() %>%
layout(hoverlabel = text) %>%
animation_opts(1500, 1) %>%
animation_slider(currentvalue = list(visible = FALSE)) %>%
animation_button(x = 0, xanchor = "left", y = 0, yanchor = "bottom")
RecatTable <- d1 %>%
filter(year(Occurred.Date) < 2024) %>%
mutate(
Occur.Years = trunc.Date(Occurred.Date, 'years')
) %>%
group_by(Crime.Category, Highest.Offense.Description, Occur.Years) %>%
summarize(
Count = n(),
.groups = 'drop'
) %>%
arrange(by = Occur.Years) %>%
group_by(Crime.Category, Highest.Offense.Description) %>%
summarize(
mean = mean(Count),
sd = sd(Count),
sum = sum(Count),
.groups = 'drop'
) %>%
gt() %>%
tab_header(
title = md('**Crime Recategorization Key**')
) %>%
cols_label(
Crime.Category = md('**New Category**'),
Highest.Offense.Description = md('**Original Description**'),
mean = md('**Mean Occurrence Across Years**'),
sd = md('**Standard Deviation of Yearly Occurrence**'),
sum = md('**Total Occurrences**')
) %>%
fmt_number(columns = mean:sd, decimals = 1) %>%
opt_interactive()
skim(d1)
catbarly
cplotly
RecatTable
# Categorical bar chart
d1 %>% filter(Crime.Category == 'MURDER') %>% mutate(month = trunc.Date(Occurred.Date, 'months')) %>% group_by(month, Highest.Offense.Description) %>% summarize(n = n())
# Choropleth plot
# Time series plots
catbarly
#load needed packages. make sure they are installed.
pacman::p_load(here, knitr, tidyverse, skimr, fpp3, urca, forecast, gt)
theme_set(theme_minimal())
d1 <- readRDS(here('data','processed-data','processed-crime.rds'))
d1 %>% mutate(Category.Description = if_else(Category.Description == '', 'NA/Unknown', Category.Description)) %>% group_by(Category.Description, Highest.Offense.Description) %>% summarize(cnt = n()) %>% pivot_wider(names_from = Category.Description, values_from = cnt)
temp <- d1 %>%
mutate(Occurred.Date = trunc.Date(Occurred.Date, 'months')) %>%
group_by(Occurred.Date) %>%
summarize(
cnt = n()
) %>% as.data.frame() %>%
filter(year(Occurred.Date) != 2024)
rownames(temp) <- temp$Occurred.Date
temp <- temp %>% select(cnt)
temp2 <- temp %>% as.ts()
Acf(temp2)
Box.test(temp2, lag = 12, type = 'Ljung-Box')
auto.arima(temp2)
auto.arima(temp2) %>% forecast(h=24) %>% autoplot()
#temp2 %>% log() %>% diff(12) %>% diff() %>% diff() %>% diff() %>% diff() %>% diff() %>% Acf()
temp3 <- d1 %>%
filter(Crime.Category == 'MURDER') %>%
mutate(Occurred.Date = trunc.Date(Occurred.Date, 'months')) %>%
group_by(Occurred.Date) %>%
summarize(
cnt = n()
) %>% as.data.frame() %>%
filter(year(Occurred.Date) < 2024)
rownames(temp3) <- temp3$Occurred.Date
temp3 <- temp3 %>% select(cnt)
temp5 <- temp3 %>% as.ts()
Acf(temp5)
auto.arima(log(temp5))
Box.test(diff(log(temp5)), lag = 4, type = 'Ljung-Box')
temp5 %>% log() %>% diff() %>% ur.kpss() %>% summary()
temp5 %>% log() %>% diff() %>% Acf()
temp5 %>% log() %>% diff() %>% plot()
fit <- Arima(temp5, order = c(0,1,1))
autoplot(forecast(fit, h=24))
fit2 <- Arima(log(temp5), order = c(0,1,1))
autoplot(forecast(fit2, h=24))
fets <- function(x, h) {
forecast(ets(x), h=h)
}
farima <- function(x, h) {
forecast(auto.arima(x), h=h)
}
e1 <- tsCV(log(temp5), fets, h=1)
e2 <- tsCV(log(temp5), farima, h=1)
# MSE comparisons
mean(e1^2, na.rm=TRUE)
mean(e2^2, na.rm=TRUE)
crime_agg <- d1 %>%
filter(Occurred.Date <= '2024-03-31') %>%
mutate(Occurred.Date = yearmonth(Occurred.Date)) %>%
group_by(Occurred.Date, Crime.Category) %>%
summarize(
cnt = n()
) %>% as.data.frame() %>%
as_tsibble(key = Crime.Category, index = Occurred.Date) %>%
aggregate_key(Crime.Category, Count = sum(cnt)) %>%
fill_gaps(Count = 0)
group_fit <- crime_agg %>%
filter(year(Occurred.Date) < 2024) %>%
model(base = ARIMA(Count)) %>%
reconcile(
td = top_down(base)
)
group_fit
group_fcast <- group_fit %>%
forecast(h = '2 years')
grpPlot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER', 'AGGRAVATED ASSAULT', 'UNLAWFUL RESTRAINT' )| is_aggregated(Crime.Category), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019)#, Crime.Category == 'MURDER')
) + facet_wrap(vars(Crime.Category), scales = 'free_y',
labeller = labeller(
Crime.Category = c('<aggregated>' = 'All Crime',
'AGGRAVATED ASSAULT' = 'Aggravated Assault',
'MURDER' = 'Murder',
'UNLAWFUL RESTRAINT' = 'Unlawful Restraint')
)
) +
labs(x = 'Month', y = 'Count', title = 'Grouped Forecasts of Crime Occurence by Month')
murdplot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER'), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019, Crime.Category == 'MURDER')
) +
labs(x = 'Month', y = 'Count', title = 'Murder Forecasts by Month')
grpPlot
murdplot
ggsave(here('results', 'figures', 'static-plots', 'crime-forecast.png'), grpPlot)
ggsave(here('results', 'figures', 'static-plots', 'murder-forecast.png'), murdplot)
crime_agg %>%
filter(year(Occurred.Date) < 2024,Crime.Category == 'MURDER') %>%
model(base = ARIMA(Count))
crime_agg %>%
filter(year(Occurred.Date) < 2024,Crime.Category == 'MURDER') %>%
model(base = ARIMA(Count)) %>% forecast(h = '2 years') %>%
autoplot(crime_agg %>% filter(year(Occurred.Date) >= 2019, Crime.Category == 'MURDER'))
AvF <- d1 %>%
filter(year(Occurred.Date) == 2024, Crime.Category == 'MURDER') %>%
mutate(
Occurred.Date = yearmonth(Occurred.Date)
) %>%
group_by(Occurred.Date) %>%
summarize(
n = n()
) %>% left_join(filter(group_fcast, Crime.Category == 'MURDER' & .model == 'td'), join_by(Occurred.Date == Occurred.Date)) %>%
select(Occurred.Date, n, .mean) %>%
gt() %>%
tab_header(
title = md('**Forecast vs Actual<br>Murder Count**')
) %>%
cols_label(
Occurred.Date = md('**Month**'),
n = md('**Actual**'),
.mean = md('**Forecasted**')
) %>%
fmt_number(columns = .mean, decimals = 1)
AvF
gtsave(AvF, 'actual-vs-forecast.html', here('results', 'figures', 'static-plots'))
group_fcast %>% filter(Crime.Category == 'MURDER') %>% gg_tsresiduals()
group_fcast %>% filter(Crime.Category == 'MURDER') %>% select(.model) %>% gg_tsresiduals()
View(group_fcast)
group_fcast %>% filter(Crime.Category == 'MURDER') %>% select(.mean) %>% gg_tsresiduals()
group_fcast %>% filter(Crime.Category == 'MURDER') %>% select(.mean) %>% gg_tsresiduals()
?gg_tsresiduals
group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
aggresid <- group_fit %>% filter(Crime.Category == '<aggregated>') %>% select(td) %>% gg_tsresiduals()
murdresid
aggresid
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
aggresid <- group_fit %>% filter(Crime.Category == '<aggregated>') %>% select(td) %>% gg_tsresiduals()
#murdresid
aggresid
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
murdresid
aggresid <- group_fit %>% filter(is_aggregated(Crime.Category)) %>% select(td) %>% gg_tsresiduals()
aggresid
augment(filter(group_fit, is_aggregated(Crime.Category))) %>%
features(.resid, ljung_box, l = 24)
augment(filter(group_fit, is_aggregated(Crime.Category), .model = 'td')) %>%
features(.resid, ljung_box, l = 24)
augment(filter(group_fit, is_aggregated(Crime.Category), .model == 'td')) %>%
features(.resid, ljung_box, l = 24)
augment(filter(group_fit, is_aggregated(Crime.Category))) %>%
features(.resid, ljung_box, l = 24)
augment(filter(group_fit, Crime.Category == 'MURDER')) %>%
features(.resid, ljung_box, l = 24)
theme_set(theme_classic())
grpPlot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER', 'AGGRAVATED ASSAULT', 'UNLAWFUL RESTRAINT' )| is_aggregated(Crime.Category), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019)#, Crime.Category == 'MURDER')
) + facet_wrap(vars(Crime.Category), scales = 'free_y',
labeller = labeller(
Crime.Category = c('<aggregated>' = 'All Crime',
'AGGRAVATED ASSAULT' = 'Aggravated Assault',
'MURDER' = 'Murder',
'UNLAWFUL RESTRAINT' = 'Unlawful Restraint')
)
) +
labs(x = 'Month', y = 'Count', title = 'Grouped Forecasts of Crime Occurence by Month')
murdplot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER'), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019, Crime.Category == 'MURDER')
) +
labs(x = 'Month', y = 'Count', title = 'Murder Forecasts by Month')
grpPlot
theme_set(theme_bw())
grpPlot
theme_set(theme_minimal())
grpPlot
?theme_minimal
crime_agg <- d1 %>%
filter(Occurred.Date <= '2024-03-31') %>%
mutate(Occurred.Date = yearmonth(Occurred.Date)) %>%
group_by(Occurred.Date, Crime.Category) %>%
summarize(
cnt = n()
) %>% as.data.frame() %>%
as_tsibble(key = Crime.Category, index = Occurred.Date) %>%
aggregate_key(Crime.Category, Count = sum(cnt)) %>%
fill_gaps(Count = 0)
group_fit <- crime_agg %>%
filter(year(Occurred.Date) < 2024) %>%
model(base = ARIMA(Count)) %>%
reconcile(
td = top_down(base)
)
group_fit
group_fcast <- group_fit %>%
forecast(h = '2 years')
grpPlot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER', 'AGGRAVATED ASSAULT', 'UNLAWFUL RESTRAINT' )| is_aggregated(Crime.Category), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019)#, Crime.Category == 'MURDER')
) + facet_wrap(vars(Crime.Category), scales = 'free_y',
labeller = labeller(
Crime.Category = c('<aggregated>' = 'All Crime',
'AGGRAVATED ASSAULT' = 'Aggravated Assault',
'MURDER' = 'Murder',
'UNLAWFUL RESTRAINT' = 'Unlawful Restraint')
)
) +
labs(x = 'Month', y = 'Count', title = 'Grouped Forecasts of Crime Occurence by Month') +
theme(panel.background = element_rect(fill = 'white',
color = 'white')
)
murdplot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER'), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019, Crime.Category == 'MURDER')
) +
labs(x = 'Month', y = 'Count', title = 'Murder Forecasts by Month') +
theme(panel.background = element_rect(fill = 'white',
color = 'white')
)
grpPlot
murdplot
ggsave(here('results', 'figures', 'static-plots', 'crime-forecast.png'), grpPlot)
ggsave(here('results', 'figures', 'static-plots', 'murder-forecast.png'), murdplot)
crime_agg <- d1 %>%
filter(Occurred.Date <= '2024-03-31') %>%
mutate(Occurred.Date = yearmonth(Occurred.Date)) %>%
group_by(Occurred.Date, Crime.Category) %>%
summarize(
cnt = n()
) %>% as.data.frame() %>%
as_tsibble(key = Crime.Category, index = Occurred.Date) %>%
aggregate_key(Crime.Category, Count = sum(cnt)) %>%
fill_gaps(Count = 0)
group_fit <- crime_agg %>%
filter(year(Occurred.Date) < 2024) %>%
model(base = ARIMA(Count)) %>%
reconcile(
td = top_down(base)
)
group_fit
group_fcast <- group_fit %>%
forecast(h = '2 years')
grpPlot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER', 'AGGRAVATED ASSAULT', 'UNLAWFUL RESTRAINT' )| is_aggregated(Crime.Category), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019)#, Crime.Category == 'MURDER')
) + facet_wrap(vars(Crime.Category), scales = 'free_y',
labeller = labeller(
Crime.Category = c('<aggregated>' = 'All Crime',
'AGGRAVATED ASSAULT' = 'Aggravated Assault',
'MURDER' = 'Murder',
'UNLAWFUL RESTRAINT' = 'Unlawful Restraint')
)
) +
labs(x = 'Month', y = 'Count', title = 'Grouped Forecasts of Crime Occurence by Month') +
theme(panel.background = element_rect(fill = 'white',
color = 'white'),
plot.background = element_rect(fill = 'white',
color = 'white')
)
murdplot <- group_fcast %>%
filter(Crime.Category %in% c('MURDER'), .model == 'td') %>%
autoplot(
crime_agg %>% filter(year(Occurred.Date) >= 2019, Crime.Category == 'MURDER')
) +
labs(x = 'Month', y = 'Count', title = 'Murder Forecasts by Month') +
theme(panel.background = element_rect(fill = 'white',
color = 'white'),
plot.background = element_rect(fill = 'white',
color = 'white')
)
grpPlot
murdplot
ggsave(here('results', 'figures', 'static-plots', 'crime-forecast.png'), grpPlot)
ggsave(here('results', 'figures', 'static-plots', 'murder-forecast.png'), murdplot)
aggresid <- group_fit %>% filter(is_aggregated(Crime.Category)) %>% select(td) %>% gg_tsresiduals()
aggresid
ggsave(here('results', 'figures', 'static-plots', 'crime-resid.png'), aggresid)
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
murdresid
ggsave(here('results', 'figures', 'static-plots', 'murd-resid.png'), murdresid)
augment(filter(group_fit, Crime.Category == 'MURDER' & .model == 'td')) %>%
features(.resid, ljung_box, l = 24)
View(group_fit)
augment(filter(group_fit, Crime.Category == 'MURDER')) %>%
features(.resid, ljung_box, l = 24)
aggresid <- group_fit %>% filter(is_aggregated(Crime.Category)) %>% select(td) %>% gg_tsresiduals() +
theme(panel.background = element_rect(fill = 'white',
color = 'white'),
plot.background = element_rect(fill = 'white',
color = 'white')
)
augment(filter(group_fit, is_aggregated(Crime.Category))) %>%
features(.resid, ljung_box, l = 24) %>% gt()
augment(filter(group_fit, is_aggregated(Crime.Category))) %>%
features(.resid, ljung_box, l = 24)
augment(filter(group_fit, Crime.Category == 'MURDER')) %>%
features(.resid, ljung_box, l = 24) %>% gt()
augment(filter(group_fit, is_aggregated(Crime.Category))) %>%
features(.resid, ljung_box, l = 24) %>% gt()
murdlb <- augment(filter(group_fit, Crime.Category == 'MURDER')) %>%
features(.resid, ljung_box, l = 24) %>% gt()
murdlb
gtsave(murdlb, 'murder-ljung.html', here('results', 'figures', 'static-plots'))
agglb <- augment(filter(group_fit, is_aggregated(Crime.Category))) %>%
features(.resid, ljung_box, l = 24) %>% gt()
agglb
gtsave(agglb, 'aggregated-ljung.html', here('results', 'figures', 'static-plots'))
aggresid <- group_fit %>% filter(is_aggregated(Crime.Category)) %>% select(td) %>% gg_tsresiduals()
aggresid
ggsave(here('results', 'figures', 'static-plots', 'crime-resid.png'), aggresid)
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER', model == 'td') %>% select(td) %>% gg_tsresiduals()
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER', .model == 'td') %>% select(td) %>% gg_tsresiduals()
group_fit
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(base) %>% gg_tsresiduals()
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(base) %>% gg_tsresiduals()
murdresid
murdresid
murdresid
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
murdresid
murdresid
murdresid <- group_fit %>% filter(Crime.Category == 'MURDER') %>% select(td) %>% gg_tsresiduals()
murdresid
ggsave(here('results', 'figures', 'static-plots', 'murd-resid.png'), murdresid)
getwd()
# load a few R packages
pacman::p_load(here, knitr, tidyverse, skimr, htmlwidgets, htmltools, plotly, tigris, gt, gtExtras)
theme_set(theme_minimal())
getwd()
